name: SaveNServe CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Build and test backend
      run: |
        cd backend
        mvn clean package -DskipTests
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    # --- NEW STEP: UPLOAD THE BUILD ARTIFACTS ---
    - name: Upload artifacts for deployment
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          frontend/dist
          backend
          docker-compose.prod.yml
          deploy.sh
          
  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    # --- NEW STEP: DOWNLOAD THE BUILD ARTIFACTS ---
    - name: Download artifacts from build job
      uses: actions/download-artifact@v3
      with:
        name: deployment-artifacts

    - name: Deploy to AWS EC2
      run: |
        # Write the SSH key from secrets to a temporary file
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem

        # Copy the downloaded artifacts to the server
        scp -o StrictHostKeyChecking=no -i private_key.pem -r ./* ec2-user@${{ secrets.EC2_HOST }}:~/savenserve/
        
        # SSH into the server to install dependencies and run the deployment
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Install Docker and Docker Compose
          sudo dnf update -y
          sudo dnf install -y docker docker-compose
          
          # Add ec2-user to the docker group and start the service
          sudo usermod -aG docker ec2-user
          sudo systemctl enable docker
          sudo systemctl start docker
          
          # --- IMPORTANT CHANGE HERE ---
          # Run the deployment script as ec2-user in a new login shell
          # to ensure the docker group permissions are applied.
          su - ec2-user -c 'cd ~/savenserve && chmod +x deploy.sh && sudo ./deploy.sh'
        EOF